import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useTranslation } from '@/utils/i18n';
import { useToast } from '@/hooks/use-toast';
import { FileText, Download, Plus, Trash2 } from 'lucide-react';

interface Medicine {
  name: string;
  dosage: string;
  frequency: string;
  duration: string;
  instructions: string;
}

interface PrescriptionData {
  patientName: string;
  patientAge: string;
  patientGender: string;
  diagnosis: string;
  medicines: Medicine[];
  doctorNotes: string;
  followUpDate: string;
}

interface PrescriptionPDFGeneratorProps {
  patientId?: string;
  doctorId?: string;
  onPrescriptionGenerated?: (prescription: any) => void;
}

export const PrescriptionPDFGenerator: React.FC<PrescriptionPDFGeneratorProps> = ({
  patientId,
  doctorId,
  onPrescriptionGenerated
}) => {
  const { t } = useTranslation('en');
  const { toast } = useToast();

  const [prescriptionData, setPrescriptionData] = useState<PrescriptionData>({
    patientName: '',
    patientAge: '',
    patientGender: '',
    diagnosis: '',
    medicines: [{ name: '', dosage: '', frequency: '', duration: '', instructions: '' }],
    doctorNotes: '',
    followUpDate: ''
  });

  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [isGenerating, setIsGenerating] = useState(false);

  const addMedicine = () => {
    setPrescriptionData(prev => ({
      ...prev,
      medicines: [...prev.medicines, { name: '', dosage: '', frequency: '', duration: '', instructions: '' }]
    }));
  };

  const removeMedicine = (index: number) => {
    setPrescriptionData(prev => ({
      ...prev,
      medicines: prev.medicines.filter((_, i) => i !== index)
    }));
  };

  const updateMedicine = (index: number, field: keyof Medicine, value: string) => {
    setPrescriptionData(prev => ({
      ...prev,
      medicines: prev.medicines.map((med, i) => 
        i === index ? { ...med, [field]: value } : med
      )
    }));
  };

  const updateField = (field: keyof PrescriptionData, value: any) => {
    setPrescriptionData(prev => ({ ...prev, [field]: value }));
  };

  const generatePDFContent = () => {
    const currentDate = new Date().toLocaleDateString();
    
    return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Medical Prescription</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
    .header { text-align: center; border-bottom: 2px solid #0EA5E9; padding-bottom: 20px; margin-bottom: 30px; }
    .clinic-name { font-size: 24px; font-weight: bold; color: #0EA5E9; }
    .patient-info { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px; }
    .medicines-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
    .medicines-table th, .medicines-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
    .medicines-table th { background-color: #f8f9fa; font-weight: bold; }
    .notes { margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 5px; }
    .footer { margin-top: 40px; text-align: center; color: #666; }
  </style>
</head>
<body>
  <div class="header">
    <div class="clinic-name">MediMinder Health Platform</div>
    <div>Digital Prescription</div>
    <div>Date: ${currentDate}</div>
  </div>

  <div class="patient-info">
    <div>
      <strong>Patient Name:</strong> ${prescriptionData.patientName}<br>
      <strong>Age:</strong> ${prescriptionData.patientAge}<br>
      <strong>Gender:</strong> ${prescriptionData.patientGender}
    </div>
    <div>
      <strong>Diagnosis:</strong> ${prescriptionData.diagnosis}<br>
      <strong>Follow-up Date:</strong> ${prescriptionData.followUpDate}
    </div>
  </div>

  <table class="medicines-table">
    <thead>
      <tr>
        <th>Medicine Name</th>
        <th>Dosage</th>
        <th>Frequency</th>
        <th>Duration</th>
        <th>Instructions</th>
      </tr>
    </thead>
    <tbody>
      ${prescriptionData.medicines.map(med => `
        <tr>
          <td>${med.name}</td>
          <td>${med.dosage}</td>
          <td>${med.frequency}</td>
          <td>${med.duration}</td>
          <td>${med.instructions}</td>
        </tr>
      `).join('')}
    </tbody>
  </table>

  ${prescriptionData.doctorNotes ? `
  <div class="notes">
    <strong>Doctor's Notes:</strong><br>
    ${prescriptionData.doctorNotes}
  </div>
  ` : ''}

  <div class="footer">
    Generated by MediMinder Health Platform<br>
    This is a digitally generated prescription
  </div>
</body>
</html>
    `;
  };

  const generatePDF = async () => {
    setIsGenerating(true);
    
    try {
      // Create PDF content
      const htmlContent = generatePDFContent();
      
      // Create a new window with the prescription content
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(htmlContent);
        printWindow.document.close();
        
        // Trigger print dialog
        setTimeout(() => {
          printWindow.print();
        }, 100);
      }

      // Save prescription data (in real app, this would be API call)
      const prescription = {
        id: `presc-${Date.now()}`,
        patientId,
        doctorId,
        ...prescriptionData,
        language: selectedLanguage,
        createdAt: new Date().toISOString()
      };

      onPrescriptionGenerated?.(prescription);

      toast({
        title: "Prescription Generated",
        description: "The prescription has been generated successfully",
      });

    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate prescription",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Card className="max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="w-6 h-6 text-primary" />
          Prescription Builder
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Language Selection */}
        <div className="flex items-center gap-4">
          <Label>Language:</Label>
          <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
            <SelectTrigger className="w-40">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="en">English</SelectItem>
              <SelectItem value="hi">Hindi</SelectItem>
              <SelectItem value="kn">Kannada</SelectItem>
              <SelectItem value="ta">Tamil</SelectItem>
              <SelectItem value="te">Telugu</SelectItem>
              <SelectItem value="ml">Malayalam</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Patient Information */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <Label>Patient Name</Label>
            <Input
              value={prescriptionData.patientName}
              onChange={(e) => updateField('patientName', e.target.value)}
              placeholder="Enter patient name"
            />
          </div>
          <div>
            <Label>Age</Label>
            <Input
              type="number"
              value={prescriptionData.patientAge}
              onChange={(e) => updateField('patientAge', e.target.value)}
              placeholder="Age"
            />
          </div>
          <div>
            <Label>Gender</Label>
            <Select value={prescriptionData.patientGender} onValueChange={(value) => updateField('patientGender', value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select gender" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="male">Male</SelectItem>
                <SelectItem value="female">Female</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Diagnosis */}
        <div>
          <Label>Diagnosis</Label>
          <Textarea
            value={prescriptionData.diagnosis}
            onChange={(e) => updateField('diagnosis', e.target.value)}
            placeholder="Enter diagnosis"
            rows={2}
          />
        </div>

        {/* Medicines */}
        <div>
          <div className="flex items-center justify-between mb-4">
            <Label className="text-lg">Medicines</Label>
            <Button onClick={addMedicine} size="sm" className="flex items-center gap-2">
              <Plus className="w-4 h-4" />
              Add Medicine
            </Button>
          </div>
          
          <div className="space-y-4">
            {prescriptionData.medicines.map((medicine, index) => (
              <Card key={index} className="p-4">
                <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                  <div>
                    <Label>Medicine Name</Label>
                    <Input
                      value={medicine.name}
                      onChange={(e) => updateMedicine(index, 'name', e.target.value)}
                      placeholder="Medicine name"
                    />
                  </div>
                  <div>
                    <Label>Dosage</Label>
                    <Input
                      value={medicine.dosage}
                      onChange={(e) => updateMedicine(index, 'dosage', e.target.value)}
                      placeholder="e.g., 500mg"
                    />
                  </div>
                  <div>
                    <Label>Frequency</Label>
                    <Select value={medicine.frequency} onValueChange={(value) => updateMedicine(index, 'frequency', value)}>
                      <SelectTrigger>
                        <SelectValue placeholder="Frequency" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="once_daily">Once daily</SelectItem>
                        <SelectItem value="twice_daily">Twice daily</SelectItem>
                        <SelectItem value="thrice_daily">Thrice daily</SelectItem>
                        <SelectItem value="as_needed">As needed</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>Duration</Label>
                    <Input
                      value={medicine.duration}
                      onChange={(e) => updateMedicine(index, 'duration', e.target.value)}
                      placeholder="e.g., 7 days"
                    />
                  </div>
                  <div className="flex items-end gap-2">
                    <div className="flex-1">
                      <Label>Instructions</Label>
                      <Input
                        value={medicine.instructions}
                        onChange={(e) => updateMedicine(index, 'instructions', e.target.value)}
                        placeholder="After food"
                      />
                    </div>
                    {prescriptionData.medicines.length > 1 && (
                      <Button 
                        variant="destructive" 
                        size="sm"
                        onClick={() => removeMedicine(index)}
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>

        {/* Doctor's Notes and Follow-up */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label>Doctor's Notes</Label>
            <Textarea
              value={prescriptionData.doctorNotes}
              onChange={(e) => updateField('doctorNotes', e.target.value)}
              placeholder="Additional notes or instructions"
              rows={3}
            />
          </div>
          <div>
            <Label>Follow-up Date</Label>
            <Input
              type="date"
              value={prescriptionData.followUpDate}
              onChange={(e) => updateField('followUpDate', e.target.value)}
            />
          </div>
        </div>

        {/* Generate Button */}
        <div className="flex justify-end">
          <Button 
            onClick={generatePDF}
            disabled={isGenerating || !prescriptionData.patientName || !prescriptionData.diagnosis}
            className="flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            {isGenerating ? 'Generating...' : 'Generate Prescription PDF'}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};